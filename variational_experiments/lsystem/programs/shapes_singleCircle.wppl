var utils = require.call(null, __ROOT + '/../utils.js');
var lsysUtils = require.call(null, __ROOT + '/utils.js');
var nnarch = require.call(null, __ROOT + '/nnarch');
var _ = require.call(null, 'underscore');
var THREE = require.call(null, 'three');
var ad = require.call(null, 'adnn/ad');


// ----------------------------------------------------------------------------
// Globals / constants

var targetDB = utils.new(lsysUtils.TargetImageDatabase, __ROOT + '/targets/datasets/simpleCircles'); //flowers
// var targetDB = utils.new(lsysUtils.TargetImageDatabase, __ROOT + '/targets/datasets/script_train');
// var targetDB = utils.new(lsysUtils.TargetImageDatabase, __ROOT + '/targets/datasets/script_test');
// var targetDB = utils.new(lsysUtils.TargetImageDatabase, __ROOT + '/targets/datasets/siggraph_letters');
var targetSize = targetDB.targetSize();
lsysUtils.rendering.init(__ROOT, targetSize.width, targetSize.height);

var futurePolicy = 'immediate';
// var futurePolicy = 'lifo';
// var futurePolicy = 'fifo';
// var futurePolicy = 'uniformFromAll';
// var futurePolicy = 'uniformFromDeepest';
// var futurePolicy = 'depthWeighted';
setFuturePolicy(futurePolicy);


var viewport = {xmin: -12, xmax: 12, ymin: -22, ymax: 2};
var norm2world = function(p) {
	return utils.new(THREE.Vector2,
		viewport.xmin + p.x*(viewport.xmax - viewport.xmin), 
		viewport.ymin + p.y*(viewport.ymax - viewport.ymin)
	);	
}

// ----------------------------------------------------------------------------
// Factor encouraging similarity to target image


// Save rendered image so far to imagesSoFar directory
var saveImageSoFar = false;

// Render update
var renderUpdate = function(geo) {
	lsysUtils.rendering.drawImgToRenderContext(globalStore.genImg);
	lsysUtils.rendering.renderIncr(geo, viewport);
	globalStore.genImg = lsysUtils.rendering.copyImgFromRenderContext();
	// Save?
	if (saveImageSoFar) {
		globalStore.genImg.saveToFile(__ROOT + '/imagesSoFar/img_' + (globalStore.geo.n).toString() + '.png');
	}
};

// Basically Gaussian log-likelihood, without the constant factor
var makescore = function(val, target, tightness) {
	var diff = val - target;
	return - (diff * diff) / (tightness * tightness);
}

var simTightness = 0.02; //0.02; //0.02; //0.02
var boundsTightness = 0.001;
// var availableFuturesWeight = 25;
var targetFactor = function() {
	renderUpdate(globalStore.geo);
	// Similarity factor
	var sim = lsysUtils.normalizedSimilarity(globalStore.genImg, globalStore.target);
	globalStore.sim = sim;
	var simf = makescore(sim, 1, simTightness);
	// Bounds factors
	var bbox = globalStore.bbox;
	var extraX = (Math.max(viewport.xmin - bbox.min.x, 0) + Math.max(bbox.max.x - viewport.xmax, 0)) / (viewport.xmax - viewport.xmin);
	var extraY = (Math.max(viewport.ymin - bbox.min.y, 0) + Math.max(bbox.max.y - viewport.ymax, 0)) / (viewport.ymax - viewport.ymin);
	var boundsfx = makescore(extraX, 0, boundsTightness);
	var boundsfy = makescore(extraY, 0, boundsTightness);
	var f = simf + boundsfx + boundsfy;
	//var f = boundsfx + boundsfy;
	// ////
	// // More available futures factor
	// var fprime = simf + boundsfx + boundsfy;
	// var f = fprime + availableFuturesWeight*availableFuturesScore();
	// ////
	if (globalStore.prevFactor) {
		factor(f - globalStore.prevFactor);
	} else {
		factor(f);
	}
	globalStore.prevFactor = f;
};


// ----------------------------------------------------------------------------
// The program itself


var makeProgram = function(neurallyGuided) {

	// Set up ERPs (either normal or neurally-guided)
	var makeSampler = function(erpName, bounds) {
		console.log(erpName, bounds);
		var erp = global[erpName + 'ERP'];
		var verp = withImportanceDist(erp, Variational[erpName + 'ERP']);
		var n = bounds.length;
		return !neurallyGuided ? 
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			return sample(erp, params);
		}
		:
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			var localState = arguments[n];
			var name = arguments[n+1];	// TODO: replace with callsite id?
			var vparams = globalStore.nnGuide.predict(globalStore, localState, name, bounds);
			verp.importanceERP.setParams(vparams);
			return sample(verp, params);
		};
	};
	var makeMixtureSampler = function(erpName, nComps, bounds) {
		var erp = global[erpName + 'ERP'];
		var verp = withImportanceDist(erp, Variational[erpName + 'MixtureERP']);
		var n = bounds.length;
		// Keep weights between [0,1] (only need to keep them nonnegative, but I think
		//    this will help keep things regularized...)
		var weightBounds = repeat(nComps, function() { return ad.scalar.sigmoid; });
		var paramBounds = repeat(nComps, function() { return bounds; });
		var allBounds = weightBounds.concat(flatten(paramBounds));
		return !neurallyGuided ?
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			return sample(erp, params);
		}
		:
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			var localState = arguments[n];
			var name = arguments[n+1];	// TODO: replace with callsite id?
			var vparams = globalStore.nnGuide.predict(globalStore, localState, name, allBounds);
			var ws = vparams.slice(0, nComps);
			var ps = group(vparams.slice(nComps), n);
			verp.importanceERP.setParams([ws, ps]);
			return sample(verp, params);
		}
	};
	// var _gaussian = makeSampler('gaussian', [undefined, ad.scalar.exp]);
	// var _gaussian = makeMixtureSampler('gaussian', 1, [undefined, ad.scalar.exp]);
	// var _gaussian = makeMixtureSampler('gaussian', 2, [undefined, ad.scalar.exp]);
	// var _gaussian = makeMixtureSampler('gaussian', 3, [undefined, ad.scalar.exp]);
	var _gaussian = makeMixtureSampler('gaussian', 4, [undefined, ad.scalar.exp]);
	var _flip = makeSampler('bernoulli', [ad.scalar.sigmoid]);
	var _discrete3 = makeSampler('discrete', [ad.scalar.sigmoid, ad.scalar.sigmoid, ad.scalar.sigmoid]);
	var _uniform = makeSampler('uniform', [ad.scalar.sigmoid, ad.scalar.sigmoid]);

	console.log(_uniform);

	
	var addBranch = function(newbranch, currState) {
		// Update model state
		
		globalStore.geo = {
			type: 'branch',
			branch: newbranch,
			next: globalStore.geo,
			//parent: currState.prevBranch,
			n: globalStore.geo ? globalStore.geo.n + 1 : 1
		};
		globalStore.bbox = globalStore.bbox.clone().union(lsysUtils.bboxes.branch(newbranch));

		// Add new heuristic factor
		targetFactor();
	
	};
	
	

	var addLeaf = function(newleaf, currState) {
		//console.log("adding leaf");
		// Update model state
		globalStore.geo = {
			type: 'leaf',
			leaf: newleaf,
			next: globalStore.geo,
			//parent: currState.prevBranch,
			n: globalStore.geo ? globalStore.geo.n + 1 : 1
		};
		//console.log(globalStore.geo.n);
		globalStore.bbox = globalStore.bbox.clone().union(lsysUtils.bboxes.leaf(newleaf));

		// Add new heuristic factor
		targetFactor();
	};

	var addFlower = function(newflower, currState) {
		//console.log("adding flower ");
		// Update model state
		globalStore.geo = {
			type: 'flower',
			flower: newflower,
			next: globalStore.geo,
			//parent: currState.prevBranch,
			n: globalStore.geo ? globalStore.geo.n + 1 : 1
		};
		globalStore.bbox = globalStore.bbox.clone().union(lsysUtils.bboxes.flower(newflower));

		// Add new heuristic factor
		targetFactor();
	}


	var initialWidth = 1.5; //1.0; //0.75;
	var widthDecay = 1.0; //0.975;
	var minWidthPercent = 0.15;
	var minWidth = minWidthPercent*initialWidth;
	var leafAspect = 2.09859154929577;
	var leafWidthMul = 2.75; //1.3;
	var flowerRadMul = 2.75; //1;

	var state = function(obj) {
		return {
			depth: obj.depth,
			pos: obj.pos,
			angle: obj.angle,
			width: obj.width,
			prevBranch: obj.prevBranch,
			features: neurallyGuided ? globalStore.nnGuide.localFeatures(obj) : undefined
		};
	};

	var polar2rect = function(r, theta) {
		return utils.new(THREE.Vector2, r*Math.cos(theta), r*Math.sin(theta));
	};

	var lOpts = ['none', 'left', 'right'];
	var lProbs = [1, 1, 1];


	var flower = function(currState) {
		var newState = currState;

		/*
		//Predict "where to look"
		var middlePos = norm2world(utils.new(THREE.Vector2,
					0.5,
					0.5
					));
		var middleState = state({
			depth: 0,
			pos: middlePos,
			angle: 0,
			width: initialWidth,
			prevBranch: undefined
		});

		var focusPos_x = _gaussian((viewport.xmin + viewport.xmax)/2, 10, middleState, 'attentionX');;
		var focusPos_y = _gaussian((viewport.xmin + viewport.xmax)/2, 10, middleState, 'attentionY');;

		var newState = state({
			depth: 0,
			pos: norm2world(utils.new(THREE.Vector2,
					focusPos_x,
					focusPos_y
					)),
			angle: 0,
			width: initialWidth,
			prevBranch: undefined
		});
	*/

		var center_x = _gaussian((viewport.xmin + viewport.xmax)/2, 5, newState, 'flowerCenterX');
		var center_y = _gaussian((viewport.ymin + viewport.ymax)/2, 5, newState, 'flowerCenterY');

		//console.log("center x y ", center_x, center_y);

		addFlower({
			center: utils.new(THREE.Vector2,
			center_x,
			center_y
			), //ERP //newbranch.end
			radius: flowerRadMul * initialWidth, //fixed
			angle: 0//_gaussian(0, Math.PI/12, newState, 'flowerAngle') //ERP //newbranch.angle 
		}, newState);

		if (neurallyGuided) {
			globalStore.nnGuide.step(globalStore, newState);
		}

		//globalStore.terminated = true;

		// Terminate?
		/*
		future(function() {
			globalStore.terminated = true;
		});
		*/
	}
	/*
	var leaf = function(currState) { //branch
		var newState = currState;

		var leafOpt = lOpts[_discrete3(lProbs[0], lProbs[1], lProbs[2], newState, 'leaf')];
		//if (leafOpt !== 'none') {
		var lwidth = leafWidthMul * initialWidth;
		var llength = lwidth * leafAspect;
		var angmean = (leafOpt === 'left') ? Math.PI/4 : -Math.PI/4;
		//var langle = newbranch.angle + _gaussian(angmean, Math.PI/12, newState, 'leafAngle');
		var langle = _gaussian(angmean, Math.PI/12, newState, 'leafAngle');
		var start_x = _gaussian((viewport.xmin + viewport.xmax)/2, 10, newState, 'leafStartX');
		var start_y = _gaussian((viewport.ymin + viewport.ymax)/2, 10, newState, 'leafStartY');
		
		var lstart = utils.new(THREE.Vector2,
			start_x,
			start_y
		);
		//var lstart = newbranch.start.clone().lerp(newbranch.end, 0.5);
		var lend = polar2rect(llength, langle).add(lstart);
		var lcenter = lstart.clone().add(lend).multiplyScalar(0.5);
		//console.log(lcenter);
		addLeaf({
			length: llength,
			width: lwidth,
			angle: langle,
			center: lcenter
		}, newState);
		

		// Generate flower?
		future(function() {
			if (_flip(0.5, newState, 'flower')) {
			
				var center_x = _gaussian((viewport.xmin + viewport.xmax)/2, 10, newState, 'flowerCenterX');
				var center_y = _gaussian((viewport.ymin + viewport.ymax)/2, 10, newState, 'flowerCenterY');

				addFlower({

					center: utils.new(THREE.Vector2,
					center_x,
					center_y
					), //ERP //newbranch.end
					radius: flowerRadMul * initialWidth, //fixed
					angle: _gaussian(0, Math.PI/12, newState, 'flowerAngle') //ERP //newbranch.angle 
				}, newState);
			}
		});

		if (neurallyGuided) {
			globalStore.nnGuide.step(globalStore, newState);
		}

		// Terminate?
		future(function() {
			var terminateProb = 0.5; //0.5
			if (_flip(terminateProb, newState, 'terminate')) {
				globalStore.terminated = true;
				//console.log('term inate ');
			} else {
				// Generate no further shapes w/ prob 1/3
				// Generate leaf w/ prob 1/3
				// Generate flower w/ prob 1/3
				future(function() {
					if (!globalStore.terminated && _flip(0.66, newState, 'shape1')) { //0.66, branch1
						//console.log('new thing');
						leaf(newState);
						future(function() {
							if (!globalStore.terminated && _flip(0.5, newState, 'shape2')) { //0.5, branch2
								//console.log('another new thing');
								flower(newState);
							}
							// else factor(0);
						});
					}
					// else factor(0);
				});
			}
		});
	};
	*/

	var generate = function() {
		// Constants needed by the guide architecture
		if (neurallyGuided) {
			globalStore.nnGuide.constant('targetDB', targetDB);
			globalStore.nnGuide.constant('viewport', viewport);
			globalStore.nnGuide.constant('initialWidth', initialWidth);
			globalStore.nnGuide.constant('minWidth', minWidth);
		}
	
		// If target is not fixed, then marginalize over targets
		if (globalStore.target === undefined) {
			globalStore.target = targetDB.getTargetByIndex(randomInteger(targetDB.numTargets()));
		}
		var w = globalStore.target.image.width;
		var h = globalStore.target.image.height;
		globalStore.genImg = utils.new(lsysUtils.ImageData2D).fillWhite(w, h);

		if (neurallyGuided) {
			globalStore.nnGuide.init(globalStore);
		}
		
		globalStore.geo = undefined;
		globalStore.bbox = utils.new(THREE.Box2);

		// Determine starting state by inverting viewport transform
		var starting_world_pos = utils.new(THREE.Vector2,
					0,
					0
					);
		var starting_dir = utils.new(THREE.Vector2,
					0,
					0
					);
		//var starting_world_pos = norm2world(globalStore.target.startPos);
		//var starting_dir = globalStore.target.startDir;
		var starting_ang = Math.atan2(starting_dir.y, starting_dir.x);

		// These are separated like this so that we can have an initial local
		//    state to feed to the f for the initial angle.
		var initState = state({
			depth: 0,
			pos: starting_world_pos,
			angle: 0,
			width: initialWidth,
			prevBranch: undefined
		});
		var startState = state({
			depth: initState.depth,
			pos: initState.pos,
			angle: _gaussian(starting_ang, Math.PI/6, initState, 'startAngle'),
			width: initState.width,
			prevBranch: initState.prevBranch
		});

		future(function() {
			//if (_flip(0.5, startState, 'startShape'))  {
			//	leaf(startState); 
			//}
			//else {
				flower(startState); 
		//	}
		});
		finishAllFutures();

		return globalStore.geo;
	};

	return generate;
}


// ----------------------------------------------------------------------------
// Return stuff that external tasks will need


var rets = {
	generate: makeProgram(false),
	generateGuided: makeProgram(true),
	targetDB: targetDB,
	viewport: viewport,
	globalStore: globalStore,
	environment: env
};
rets;





